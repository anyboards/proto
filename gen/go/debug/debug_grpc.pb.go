// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: debug.proto

package debug

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Debug_Add_FullMethodName           = "/anyboards.debug.v1.Debug/Add"
	Debug_Greet_FullMethodName         = "/anyboards.debug.v1.Debug/Greet"
	Debug_Stream_FullMethodName        = "/anyboards.debug.v1.Debug/Stream"
	Debug_TriggerStream_FullMethodName = "/anyboards.debug.v1.Debug/TriggerStream"
)

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Debug_StreamClient, error)
	TriggerStream(ctx context.Context, in *TriggerStreamRequest, opts ...grpc.CallOption) (Debug_TriggerStreamClient, error)
}

type debugClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugClient(cc grpc.ClientConnInterface) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Debug_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, Debug_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Debug_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Debug_ServiceDesc.Streams[0], Debug_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &debugStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type debugStreamClient struct {
	grpc.ClientStream
}

func (x *debugStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) TriggerStream(ctx context.Context, in *TriggerStreamRequest, opts ...grpc.CallOption) (Debug_TriggerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Debug_ServiceDesc.Streams[1], Debug_TriggerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &debugTriggerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_TriggerStreamClient interface {
	Recv() (*TriggerStreamResponse, error)
	grpc.ClientStream
}

type debugTriggerStreamClient struct {
	grpc.ClientStream
}

func (x *debugTriggerStreamClient) Recv() (*TriggerStreamResponse, error) {
	m := new(TriggerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugServer is the server API for Debug service.
// All implementations must embed UnimplementedDebugServer
// for forward compatibility
type DebugServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	Stream(*StreamRequest, Debug_StreamServer) error
	TriggerStream(*TriggerStreamRequest, Debug_TriggerStreamServer) error
	mustEmbedUnimplementedDebugServer()
}

// UnimplementedDebugServer must be embedded to have forward compatible implementations.
type UnimplementedDebugServer struct {
}

func (UnimplementedDebugServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDebugServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedDebugServer) Stream(*StreamRequest, Debug_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedDebugServer) TriggerStream(*TriggerStreamRequest, Debug_TriggerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerStream not implemented")
}
func (UnimplementedDebugServer) mustEmbedUnimplementedDebugServer() {}

// UnsafeDebugServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugServer will
// result in compilation errors.
type UnsafeDebugServer interface {
	mustEmbedUnimplementedDebugServer()
}

func RegisterDebugServer(s grpc.ServiceRegistrar, srv DebugServer) {
	s.RegisterService(&Debug_ServiceDesc, srv)
}

func _Debug_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Debug_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Debug_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).Stream(m, &debugStreamServer{stream})
}

type Debug_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type debugStreamServer struct {
	grpc.ServerStream
}

func (x *debugStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Debug_TriggerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TriggerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).TriggerStream(m, &debugTriggerStreamServer{stream})
}

type Debug_TriggerStreamServer interface {
	Send(*TriggerStreamResponse) error
	grpc.ServerStream
}

type debugTriggerStreamServer struct {
	grpc.ServerStream
}

func (x *debugTriggerStreamServer) Send(m *TriggerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Debug_ServiceDesc is the grpc.ServiceDesc for Debug service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Debug_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anyboards.debug.v1.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Debug_Add_Handler,
		},
		{
			MethodName: "Greet",
			Handler:    _Debug_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Debug_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TriggerStream",
			Handler:       _Debug_TriggerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "debug.proto",
}
