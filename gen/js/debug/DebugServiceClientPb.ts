/**
 * @fileoverview gRPC-Web generated client stub for anyboards.debug.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: debug.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as debug_pb from './debug_pb';


export class DebugClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAdd = new grpcWeb.MethodDescriptor(
    '/anyboards.debug.v1.Debug/Add',
    grpcWeb.MethodType.UNARY,
    debug_pb.AddRequest,
    debug_pb.AddResponse,
    (request: debug_pb.AddRequest) => {
      return request.serializeBinary();
    },
    debug_pb.AddResponse.deserializeBinary
  );

  add(
    request: debug_pb.AddRequest,
    metadata: grpcWeb.Metadata | null): Promise<debug_pb.AddResponse>;

  add(
    request: debug_pb.AddRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debug_pb.AddResponse) => void): grpcWeb.ClientReadableStream<debug_pb.AddResponse>;

  add(
    request: debug_pb.AddRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debug_pb.AddResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/anyboards.debug.v1.Debug/Add',
        request,
        metadata || {},
        this.methodDescriptorAdd,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/anyboards.debug.v1.Debug/Add',
    request,
    metadata || {},
    this.methodDescriptorAdd);
  }

  methodDescriptorGreet = new grpcWeb.MethodDescriptor(
    '/anyboards.debug.v1.Debug/Greet',
    grpcWeb.MethodType.UNARY,
    debug_pb.GreetRequest,
    debug_pb.GreetResponse,
    (request: debug_pb.GreetRequest) => {
      return request.serializeBinary();
    },
    debug_pb.GreetResponse.deserializeBinary
  );

  greet(
    request: debug_pb.GreetRequest,
    metadata: grpcWeb.Metadata | null): Promise<debug_pb.GreetResponse>;

  greet(
    request: debug_pb.GreetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: debug_pb.GreetResponse) => void): grpcWeb.ClientReadableStream<debug_pb.GreetResponse>;

  greet(
    request: debug_pb.GreetRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: debug_pb.GreetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/anyboards.debug.v1.Debug/Greet',
        request,
        metadata || {},
        this.methodDescriptorGreet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/anyboards.debug.v1.Debug/Greet',
    request,
    metadata || {},
    this.methodDescriptorGreet);
  }

  methodDescriptorStream = new grpcWeb.MethodDescriptor(
    '/anyboards.debug.v1.Debug/Stream',
    grpcWeb.MethodType.SERVER_STREAMING,
    debug_pb.StreamRequest,
    debug_pb.StreamResponse,
    (request: debug_pb.StreamRequest) => {
      return request.serializeBinary();
    },
    debug_pb.StreamResponse.deserializeBinary
  );

  stream(
    request: debug_pb.StreamRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<debug_pb.StreamResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/anyboards.debug.v1.Debug/Stream',
      request,
      metadata || {},
      this.methodDescriptorStream);
  }

  methodDescriptorTriggerStreamMessage = new grpcWeb.MethodDescriptor(
    '/anyboards.debug.v1.Debug/TriggerStreamMessage',
    grpcWeb.MethodType.SERVER_STREAMING,
    debug_pb.TriggerStreamMessageRequest,
    debug_pb.TriggerStreamMessageResponse,
    (request: debug_pb.TriggerStreamMessageRequest) => {
      return request.serializeBinary();
    },
    debug_pb.TriggerStreamMessageResponse.deserializeBinary
  );

  triggerStreamMessage(
    request: debug_pb.TriggerStreamMessageRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<debug_pb.TriggerStreamMessageResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/anyboards.debug.v1.Debug/TriggerStreamMessage',
      request,
      metadata || {},
      this.methodDescriptorTriggerStreamMessage);
  }

}

