/**
 * @fileoverview gRPC-Web generated client stub for anyboards.boards.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: boards.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as boards_pb from './boards_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class BoardsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/anyboards.boards.v1.Boards/Create',
    grpcWeb.MethodType.UNARY,
    boards_pb.CreateBoardRequest,
    boards_pb.CreateBoardResponse,
    (request: boards_pb.CreateBoardRequest) => {
      return request.serializeBinary();
    },
    boards_pb.CreateBoardResponse.deserializeBinary
  );

  create(
    request: boards_pb.CreateBoardRequest,
    metadata: grpcWeb.Metadata | null): Promise<boards_pb.CreateBoardResponse>;

  create(
    request: boards_pb.CreateBoardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: boards_pb.CreateBoardResponse) => void): grpcWeb.ClientReadableStream<boards_pb.CreateBoardResponse>;

  create(
    request: boards_pb.CreateBoardRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: boards_pb.CreateBoardResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/anyboards.boards.v1.Boards/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/anyboards.boards.v1.Boards/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorListBoards = new grpcWeb.MethodDescriptor(
    '/anyboards.boards.v1.Boards/ListBoards',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    boards_pb.ListBoardResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    boards_pb.ListBoardResponse.deserializeBinary
  );

  listBoards(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<boards_pb.ListBoardResponse>;

  listBoards(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: boards_pb.ListBoardResponse) => void): grpcWeb.ClientReadableStream<boards_pb.ListBoardResponse>;

  listBoards(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: boards_pb.ListBoardResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/anyboards.boards.v1.Boards/ListBoards',
        request,
        metadata || {},
        this.methodDescriptorListBoards,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/anyboards.boards.v1.Boards/ListBoards',
    request,
    metadata || {},
    this.methodDescriptorListBoards);
  }

  methodDescriptorGetBoard = new grpcWeb.MethodDescriptor(
    '/anyboards.boards.v1.Boards/GetBoard',
    grpcWeb.MethodType.UNARY,
    boards_pb.GetBoardRequest,
    boards_pb.GetBoardResponse,
    (request: boards_pb.GetBoardRequest) => {
      return request.serializeBinary();
    },
    boards_pb.GetBoardResponse.deserializeBinary
  );

  getBoard(
    request: boards_pb.GetBoardRequest,
    metadata: grpcWeb.Metadata | null): Promise<boards_pb.GetBoardResponse>;

  getBoard(
    request: boards_pb.GetBoardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: boards_pb.GetBoardResponse) => void): grpcWeb.ClientReadableStream<boards_pb.GetBoardResponse>;

  getBoard(
    request: boards_pb.GetBoardRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: boards_pb.GetBoardResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/anyboards.boards.v1.Boards/GetBoard',
        request,
        metadata || {},
        this.methodDescriptorGetBoard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/anyboards.boards.v1.Boards/GetBoard',
    request,
    metadata || {},
    this.methodDescriptorGetBoard);
  }

}

